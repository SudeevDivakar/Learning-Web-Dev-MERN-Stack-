The internet is a global network of interconnected computers that communicate via TCP/IP.

The world wide web is an information system where documents and other resources are available 
over the internet.
Documents are transferred via HTTP.

Web server is a computer system that can satisfy requests on the web .

The client is the computer that accesses the server.

The server sends back instructions to display the code and the web browser displays it in human 
readable format.

Front end is focused on the tools running in the browser (html,css,js)

Backend is focused on the tools running in the server .

HTML is used to create web contents.

CSS helps us add designs to html contents.

JS helps to bring life to the html elements and helps them be active. 

HTML helps to desbribe the structure of a document.(It is a markup language)
Helps to bold elements, make elements links, etc.

Any unstructured text added to a html file gets added to the html webpage as it is.
Adding text in between tags helps to add the data onto the webpage in a structured manner.

(Syntax)
<b>....</b> 
Used to bold all the text present in between it.

Use developer.mozilla.org to search up stuff about web development (It's a wikipedia for web dev)

(Syntax)
<p>....</p>
Used when spacing of text is required. Different paragraph tags occur in different lines.

(Syntax)
<h1>...</h1>
<h2>...</h2>
.
.
.
<h6>...</h6>
Used to add headings onto the webpage. 
Size gradually decreases from h1 to h6.
General rule of thumb to use these headings is to use smaller headings to represent subheadings of the parent heading.
For eg.) <h2> would be a subheading of <h1>
And usually only one <h1> heading tag is used in the webpage.

A html boilerplate(skeleton) needs to be followed in order for the html document to be valid.

The structure is as follows:
<!DOCTYPE html>
<html>
    <head>
        <title>...</title>
    </head>

    <body>
        <---content goes here--->
    </body>
</html>

Doctype helps us specify that we want to use the latest version of html
<html> is the highest level element used and all are other elements are present within this tag. Permitted tags are <head> and <body>. 
<head> only contains data that doesn't show up on the webpage (aka metadata)
<body> contains the contents of the webpage 

(Tip)
!+<tab_key> : returns the html boilerplate. Use it to save time.

(Tip)
ctrl+shift+p : After this, type format document and the html document gets automatically formatted.

(Syntax)
<ol>....</ol> : stands for ordered list and has numbers
<ul>....</ul> : stands for unordered list and has bullet points instead of numbers
<li>..</li> : represents a single element in the list.
You can also have nested lists by adding ul or ol under a list item.

Attributes are data that you can pass inside an html tag. 

(Syntax)
<a href=".....">......</a>
Anchor tag
This creates a link to a specified attribute(href)
When specifying a link, make sure you mention the https://www or else it will search for a file in the directory.

(Syntax)
<img src="...">
Places an image onto the webpage
This is the first tag which does not have a closing tag.
We can also add an alt attribute which gives a decription of the src attribute in case our src attribute is not able to load.

To write comments in html, use <!-- .... -->

Inline elements fit in alongside other elements. e.g) <img>,<a>,etc.
Block level elements take up a whole block of space. e.g) <h1>,<p>,etc.

The <div> element is used so that we can add styles using css to the grouped div elements. (It's a block level element)

The <span> element serves the same purpose as div except it is an inline element. (Used to single out elements and apply styles on them) 

(Syntax)
<hr> : Does not contain a closing tag and creates a thematic break between paragraph-level elements. (Creates a divider)

(Syntax)
<br> : Creates a line break element (Goes to the next line)

(Syntax)
<sup>...</sup> : Makes any text present in between the tags a superscript. e.g) Power of a number

(Syntax)
<sub>...</sub> : Makes any text present in between the tags a subscript. e.g) Chemical formulas

HTML entities are special sequences used in html which are used to access special characters which cannot be typed out or characters which are 
reserved in html. 
These entities start with an & and end with a ;
To find out the entity number, type in "html entity less than", etc. in google
Note:- &,<,> are reserved characters.
https://html.spec.whatwg.org/multipage/named-characters.html

Semantic markups are the same as div elements except they have different names. This is helpful for web crawlers or people who read the html code 
as it helps them find each seperate divison easily (as the semantic markups have meaning). 
Different semantic markups:
<main>...</main> : dominant content of the body of a document. Must exclude stuff that are usually repeated across different webpages. e.g)sidebars,naigation links,etc.
<nav>...</nav> : represents elements on the page that provide navigation content
<section>...</section> : represents a stand alone section of a website
<article>...</article> : used to represent a certain topic. It should contain a header describing the content present.
<aside>...</aside> : elements that are not essential to a webpage.
<header>...</header> : introductory/ navigational content of the page
<footer>...</footer> : navigational/ about content of the page
<time datetime="2016-10-05">......</time> : an inline element which is wrapped around a specified time

Emmet is a feature in vscode that helps us write html codes faster. (Hit tab after all commands)
Child elements : Use the > symbol to create child elements. e.g) nav>ul>li creates a li inside a ul inside a nav.
Sibling elements : Use the + symbol to create sibling elements. e.g) h1+h2+h3 creates a h1,h2 and h3 which are all siblings.
Multiplication : Use * to create multiple instances of an element. e.g) ul>li*5 creates 5 li elements.

(Syntax)
<table>  </table> : Creates a table

<tr>   </tr> : Contains <td> tags in them which adds data onto a single row in the table

<td>...</td> : Adds a single element onto the table cell

<th>...</th> : Used to add a table header to a cell

<thead>   </thead> : Wraps up the header part of the table for clean semantic markup.
<tbody>   </tbody> : Wraps up the body part of the table for clean semantic markup.
<tfoot>   </tfoot> : Wraps up the footer part of the table for clean semantic markup.

<th colspan="2">...</th> : colspan is used to make a th or td take up the space of the specified amount of columns.
<th rowspan="2">...</th> : rowspan is used to make a th or td take up the space of the specified amount of rows.

(Syntax)
form>...</form> : Represents a document section containing interactive protocols for submitting information.
The action attribute specifies where the form data should be sent.
The method attribute specifies which HTTP method should be used.

<input type="" placeholder="" name=""> : Does not have a closing tag. Used to get elements in a specified way.
Placeholder contains the text which will appear on the input box before the user types data into it.
name : When the form is submitted and the data collected from the form is sent to the server, it is sent under the specified value of the attribute name.
Different input types :
text : provides a region to input text
password : provides a region to input obscured text
color : provides a color picker 
number : provides number inputs. Useful when only numbers are required for the input. Can have min and max attributes to specify range
email : Used to take inputs for emails. Emails entered dont have to exist as long as it is a valid email pattern.
url :  Used to take inputs for URLs. URLs entered dont have to exist as long as it is a valid URL pattern.
Type in input types on google to check for different input types.

<label for="">...</label> : Forms a connection between a piece of text and an user input. The for attribute contains an id which is given to an input.
Note : An id cannot be reused for another id name.

<button type="">...</button> : Labelled by whatever is present in between the tags. If no action is specified, the button automatically submits the form to the action 
attribut in the form tag.
Different input types for buttons:
button : creates a button that has no functionality until given one.
submit(default) : submits the form to the action attribute specified in the form tag.

<input type="checkbox" id="" name="" checked> : Used to create a checkbox. Don't forget to label your chexkboxes. checked is an optional command which 
already checks the option by default.

<input type="radio" id="" name="" value="">
Radiobuttons are the same as checkboxes except only one option can be selected at a time.
Radio buttons are associated with each other by giving them similar names.
Different values must be specified for each radiobutton so that different options return back different values

<select id="" name="">
    <option value="">....</option>
    <option value="" selected>....</option>
</select>
The select tag is used to create a drop down selection option.
Each option returns a value to the name attribute.
The selected attribute present in the option tag, selects an option by default if the user does not select one.(optional)

<input type="range" name="" id="" min="" max="" step="" value="">
The range tag creates a slider to choose values between a minimum and maximum range. 
The step attribute is an optional attribute which increases and decreases the value by a specified amount.
value is also an optional attribute which gives the range tag a default value.

<textarea name="" id="" cols="" rows="" placeholder=""></textarea>
Used to input paragraphs of text. 
Can be given a specified number of columns and rows to adjust it's size.
The placeholder attribute displays a text on the input area to provide indication.

Attributes for validation of inputs:
required : It's an attribute with no value and does not allow the user to submit the form unless they have entered data 
minlength : specifies minimum length of text required for valid data
maxlength : specifies maximum length of text possible for valid data
min : minimum value for integer inputs
max : maximum value for integer inputs

CSS - Cascading style sheets

Almost everything in CSS follows the basic pattern:
selector{
    property : value;
}
For example:
h1 {
    color : purple;
}

To include styles in your code, there are three options:
Inline styles : inline directly on each element (not a good idea)
<style> element : writing styles in a <style> element, but this makes it impossible to share style sheets between documents
External style sheets : Write styles in a .css file and connect it using the <link> in the head of your document.

The 'color : ' property is used to set the color of a text to a specified color.
The colors can be specified using various different techniques.

The 'background-color : ' property is used to set the background color of an element to a specified color.

Different color systems:
Named colors : Colors with specific names.
rgb color system : red-green-blue color system. Follows syntax rgb(0,255,148) where the max and min limits of each color are 255 and 0 respectively.
hexadecimal system : follows a 6 digit hexadecimal value in which the first two digits represent red, second two represent green, third two represent blue. The two hexadecimal digits represent the range 0-255.

Note : Make sure you include semicolons after property declarations.

CSS Text properties:
(Syntax)
text-align : <left,center,right,justify>; 
Aligns the text onto the specified location within the element itself.
(Syntax)
font-weight : <normal,bold,lighter,bolder,numeric values>;
Used to set the boldness of a specific text element.
(Syntax)
text-decoration : <underline, underline dotted, underline dotted red, green wavy underline, underline overline red, line-through>
Used to decorate text with lines. The order of the colours/line styles can be random.
Can be used to remove underlines from anchor tags using the none value.
(Syntax)
line-height : <normal, numeric value, percentage, pixel> 
Used to space the distance between lines to a specified value.
(Syntax)
letter-spacing : <normal, pixel, etc.>
Used to space letters by a specified value.
(Syntax)
font-size : Specific units(Do not use pixel as an unit if creating a responsive website)
Changes the font size of text.
(Syntax)
font-family : <font> 
Specifies the font used for the element. Caution should be taken however as some web browsers/ operating systems may not support the specified font.
Multiple fonts can be stacked(using commas) to provide backup just in case one of the fonts are not supported on the browser.

Note : Absolute units are those units which don't depend on other elements in your page. e.g)Pixels. Not recommended for responsive websites.

Universal selector : Selects all the elements in the html document.
* {
    property : value;
}

Element selector : Selects all elements of a given type 
img {
    property : value;
}

Selector list : Select a bunch of elements to apply the styles on 
h1,h2 {
    property : value;
}

ID selector : Selects a specific element using the id. Uses the # to reference them.
#hello {
    property : value;
}

Class Selector : Selects a specific group of elements and applies the same style to all of them. class value has to be specified for all the elements in the html tags
.hello {
    property : value;
}

Descendent selectors : Selects and applies styles to all specified descendent tags of another specified tag. This does not style the master tag itself and is different 
from list selectors as no commma is used here.
li a {
    property : value;
}

Adjacent selector : Only selects elements that are proceeded by another specified element. Only applies style to the proceeding element. 
h1 + p {
    property : value;
}

Direct child : Selects only child elements that are direct children of the specified parent element.
div > li {
    property : value;
}

Attribute selector : Selects all input elements with a specific type attribute.
input[type="text"] {
    property : value;
}
section[class="post] {
    property : value;
}

a[href*="google"] {
    property : value;
}
This selects all anchors with an href containing the word google within it.

Pseudo Classes are keywords added to a selector to specifies a special state of the selected element.
Used by preceding a colon before the specifying the pseudo class.
The hover pseudo class applies style to an element while the cursor hovers over it.

button:hover {
    property: value;
}
Can also be used for specific elements.
.post button:hover {
    property: value;
}

The active pseudo class applies style to an element when the element is selected.
button:active {
    property : value;
}

The checked pseudo class applies style to radio buttons or checkboxes where the items are selected.
input[type="checkbox"]:checked {
    property : value;
} 

The nth-of-type pseudo class applies style to the nth element of a specific class group or every nth element of a specific class group.
.post:nth-of-type(3) {
    property: value;
}
For the nth element
.post:nth-of-type(3n) {
    property: value;
}
For every nth element


Pseudo elements are keywords used to specify which part of the element you want to apply styles to.
Used by preceding two colons before specifying the type the pseudo element.

::first-letter : Only applies style to the first letter of the element.
::first-line : Only applies style to the first line of the element.
::selection : Used to style the color of the selected text.


The css stylesheet follows a cascade sequence (i.e. The latest style applied to an element in a css file will be the style used in the document.)
Works for different css files as well. The css style linked the latest in the html file will apply its changes onto the document.

Specificity is how the browser decides which rules to apply when multiple rules could apply to the same element.(It's basically precedence)
The order of specificity is:
ID > Class >  Element

To calculate the specificity:
The first digit is the number of id selectors
The second digit is the number of class selectors
The third digit is the number of element selectors 
By making these 3 digits into a single 3 digit number, we can compare them to find out the specificity.

Note : Inline styles have the highest specificity ever and that is why they're not recommended to be used.

To override every specificity, we use !important after the property value. This sets the property of every selected element to a specified color without exceptions.
button {
    property : value !important ;
}

CSS inheritence states that if an element is not styled specifically, it inherits the styles applied to the closest parent.
Note :- Certain elements dont inherit properties by deafult. For these elements, using property : inherit; makes the inheritence rule visible.
Note :- Certain properties are not inheritable.

The CSS box model states that everything in CSS is stored in a box like manner.

Width and height specify the width and height of the inner content box.
element {
    width : 200px;
    height : 200px;
}

Adding additional properties to this(e.g. background color) will only affect the newly assigned area.


We use borders in css to make our elements look better. We can curve these borders to provide a more aesthetic look to the webpage.
Border properties :-
border-width : 100px ; specifies the width of the border
border-color : black ; specifies the color of the border
border-style : solid ; specifies the style of the border. When two or more styles are specified, the top border gets styled first and moves in a clockwise manner.
box-sizing : border-box ; makes sure the dimensions of the element are the same as initially specified under the element specification.
border-radius : <50px,50%> ; Makes rounded edges.
Each of these properties can be individually applied to any specific side of the border using "border - <left,right,top,bottom> - <color,width,style>".

To add all these properties in one go, use :-
border : <width> <style> <color>;

border-radius : 50%; This is used to create circles.
Refer MDN to create more fun shapes.

Padding is the space in between the content box and the border.
padding-left 
padding-right 
padding-bottom 
padding-top 
These above properties are used on the respective sides.

padding : Used on all 4 sides of the content box.
padding : 5px; 5 px on all sides
padding : 5px 10px; 5px vertical(top and bottom) padding and 10px horizontal(sides) padding
padding : 5px 10px 15px; top horizontal(sides) bottom 
padding :5px 10px 15px 20px; top right bottom left 

Margin is the space outside an element's border.
margin-left 
margin-right 
margin-bottom 
margin-top 
These above properties are used on the respective sides.

margin : Used on all 4 sides of the content box.
margin : 5px; 5 px on all sides
margin : 5px 10px; 5px vertical(top and bottom) margin and 10px horizontal(sides) margin
margin : 5px 10px 15px; top horizontal(sides) bottom 
margin :5px 10px 15px 20px; top right bottom left 
To remove deafult margins use margin-bottom/right/left/top and set the value to 0.

Use:-
body {
    margin:0;
}
before starting a document to make it better.

The display property can be used to turn inline elements into blockline elements and blockline elements to inline elements.
h1 {
    display : inline; 
}
Here, h1 is originally a block line element, but it can be changed into an inline element.

Note :- Width and height properties do not work for inline elements. Space is not respected for inline elements.
To add multiple block line elements side by side, use:-
h1 {
    display : inline-block;
}

CSS units:
-> % (Unit) : The percentage uses a specified percentage of the parent element's property. e.g) 50% provides 50% of the parent element's property.
-> line-height and line-width(property) : are used to specify the line height and width of the element with respect to the elements size itself. Unit used can be %.
-> em (Unit) : They are a unit which is relative to the parent's font size. e.g) 2em provides 2 times the size of the parent's property. When using em with padding and margins, 1em 
would imply choosing the exact size of the current element. 2em would result in 2 times the size of the current element.
-> rem (Unit) : For nested elements, the elements keep on growing/decreasing with every new element introduced and thus rems are used to solve this issue. Root ems or rems, derive their 
size from the root-html element's font-size. The root element is the html tag at the top. We can set the html tag's font-size property using the same css syntax. 


The rgba color system is used to set the transparency of the color specified. a in rgba stands for alpha
e.g) rgba(0,209,112,0.5)
The alpha value only has a range from 0 to 1.
To use the alpha system on hexadecimal values, we add two extra hexadecimal digits ranging from 00 to ff.

The opacity property sets the entire element it is used on to a specific opacity value. Whereas the alpha value only makes the specified property transparent.
Opacity has a range from 0 to 1.



The position property in CSS sets how an element is positioned in a document. 
The top,right,bottom,left properties determine the final location of the element.

static is the dafault value for the position property and any values given to top,bottom,etc. will not change the position of the element in static position.
relative is a position value which positions an element with respect to its original location .
absolute removes the element from the normal document flow and no space is created for the element in the page layout. It is positioned relative to the closest positioned ancestor(parent with a position property besides static) if any else it is positioned in its initial location. 
fixed makes the element not move from it's place at all even after scrolling. This removes the element from the normal document flow and positions it relative to the top left. Can be used to make navbars that do not move.
sticky starts off as a not fixed element, but then changes into a fixed element once it is scrolled out of screen.



Transitions are used to delay switching of elements from one state to another.
h1 {
    transition : 1s;
}
makes the change occur slowly in 1s or any specified amount of time. 

Specifying a specific property before the 1s transitions only that property of the element. 
To add delay:
h1 {
    transition : background-color 3s 1s;
}
Transitions(3s) only the background color of h1 with a 1s delay.

h1 {
    transition : background-color 3s, border-radius 1s;
}
Transitions for multiple properties.

timing functions help the transitions occur in different styles.
Some different timing functions are:
h1 {
    transition-timing-function:ease-in;
    transition-timing-function:ease-out;
}
To find different timing functions, check out https://easings.net/
Note:- Only apply transitions on the element properties you want to undergo transitions.



The transform property can be used for a variety of reasons:
transform can be used to rotate an element by a certain number of degrees.
h1 {
    transform-origin : bottom right;
    transform : rotate(180deg);
}
Transform origin can be used to rotate the element from a specified position.
Other values such as rotateX,rotateY,rotateZ can be used to rotate the element around their specific axes.

scale can be used to scale an element up or down by a specified value.
h1 {
    transform : scale(0.5);
    transform : scale(0.5,2);   //length,height
    transform : scaleY(2);
    transform : scaleX(2);
}

translate is used to move an element by a specified amount. (negative values are used to change directions)
h1 {
    transform : translateX(200px);
    transform : translateX(-200px);
    transform : translateY(200px);
    transform : translateY(-200px);
    transform : translate(200px,-40px)     //moves it right and down
}

The skew function skews the element
h1 {
    transform : skewX(50deg);
    transform : skew(50px);
    transform : skew(50px,20px);    //x and y axis
    transform : skewY(50px);
}

Individual transform functions can be grouped together to apply different transforms at once.
h1 {
    transform : rotate(80deg) scale(1.5);
}



The box-shadow property allows us to add a box shadow animation to an element.
h1 {
    box-shadow : 12px 12px 3px 1px red;     // x-offset,y-offset,blur-radius,speard-radius,color
}

Note:- margin : 0 auto; aligns an element to the center of the webpage.
 

To apply a background image,
body {
    background-image : url("...");
}
Additional properties:
background-size : cover; makes the photo fit in the designated area without cropping.
background-position : top,left,center,etc.; Part of image that shows up on screen. 
'background:' is a shorthand property where all property values can be entered at once. In this, always use background position and position size right next to each other only seperated by a '/'.



To use different google fonts, refer to this website : https://fonts.google.com/

Note : Whenever we apply images on separate lines(without flexbox), html automatically adds a whitespace in between both the images. Therefore, use image tags on the same line (only the starting '<img' has to be on the same line.
The rest of the img tag can be on a different line. 

