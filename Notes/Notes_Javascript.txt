PRIMITIVE TYPES:
The Basic Building Blocks of JavaScript.
The different primitive data types are:
i)Number
ii)String
iii)Boolean
iv)Null
v)Undefined 
Note:- Symbol and BigInt are two other data types.


When we start out with javascript, we'll be using the console on chrome.
The console is a Read-Evaluate-Print-Loop


clear() - Used to clear the console.
typeof(n) - Single operand function which returns the datatype of a given operand. 
// are used to make single line comments in javascript
JavaScript has semicolons


Numbers in JavaScript:
->Only one number type in javascript 
->Positive/negative numbers
->Whole numbers
->Decimal Numbers
->Can have basic math operations like +,-,*,/,%,**
->Follows operator precedence 
->Exponentation is carried out by **
->NaN stands for Not a Number (Used for values like 0/0 or 1+NaN) (Basically an undefined value)


Variables in javascript store data types so that they can be referenced multiple times throughout the program.
(SYNTAX)
let variable_name = value;
e.g)
let year=1985;


Javascript supports the += format for updating variables.
e.g) let hello = 35;
     hello += 5;      //This results in 40. (Also works for -,/,%,*)


JavaScript also supports i++ and ++i incrementers
let i=5;
let num1=i++;  //This stores the value of num1 as 5, but after this line is executed, the value of i gets updated to 6.
let j=5;
let num2=++j;  //This stores the values of j and num2 as 6.


The const keyword is used to make a variable a constant. This means that once the variable is declared, it's value cannot be changed.
(SYNTAX)
const variable_name = value;
e.g)
const hello=5;    // The value of this variable cannot be changed.

Note : Before let and const, the only way to declare a variable was using the keyword 'var'. Nowadays there is no reason to use it. (Works very similar to let)
e.g) var hello=5; 


Booleans in JavaScript: 
->There are only two values for this datatype.
->These two values are true and false (case sensitive)
e.g) let hello1 = true;
     let hello2 = false;


Note:-Datatypes in javascript can change datatypes when re-initialized.
Typescript does not allow this and enforces strict data typing.


Rules for javascript variable naming:
->No spacing in between
->Cannot start with a digit 
->Can contain $ _ and digits(Cannot start with digits of course)
->Lower Camel Casing is a good practice in javascript (e.g currentDate,currentDate,apartmentResidents)


Strings in Javascript:
->Another primitive datatype in javascript
->Textual information 
->Must be wrapped in quotes
->Can use both double and single quotes 
->Must start and end with the same type of quote
->Strings are indexed(every character has a number associated with it). Use square brackets to access individual elements.
->String out of bounds accessing results in undefined
->Strings can be concatenated using the + operator   //"lol"+"lol" results in "lollol" 
->Strings in javascript are immutable 


(SYNTAX)
string.length
Returns the length of the string.
e.g)
"hello".length   //Results in 5


Note:- In javascript, concating a number with a string results in a string containing both the number and the text.


Methods are built in actions we can perform with individual Strings
(SYNTAX)
thing.method()

Note:- .length is accessing a property of the string whereas .method() executes a specified method.

(SYNTAX)
string.toUpperCase() : Converts the entire string to uppercase. Non destructive method (Doesn't directly change the variable unless re-initialized)
string.toLowerCase() : Converts the entire string to lowercase. Non destructive method (Doesn't directly change the variable unless re-initialized)

(SYNTAX)
string.trim() : removes white spaces at the beginning and end of the string 

Methods in javascript can be used multiple in a single line. 
e.g) string.trim().toUpperCase()   //will trim and convert the given string to uppercase.

(SYNTAX)
let string='catdog';
string.indexof('cat');    //return first occurance of cat
Note:- Will return a value of -1 if a substring is not present within a string.

(SYNTAX)
let hello = "helloThereMyFriend"
string.slice(0,5);   //hello
string.slice(5);     //ThereMyFriend
// Same as python
Note:- Negative indexing works as well

(SYNTAX)
let joke='haha that was so funny';
string.replace('haha','lolololol');
Replaces the first occurance of a string with another given string.

(SYNTAX)
let strong='lol';
string.repeat(3);   //lollollol
Repeats a string a number of times.


TEMPLATE LITERALS:
"You bought " + qty + " " + product + ". Total is: " + price*qty
Instead of writing a string like this, javascript offers template literals
These are basically strings that allow embedded expressions, which are evaluated and then turned into a resulting string.
Note:- Backtick characters are required to make template literals work.
e.g) `You bought ${qty} ${product.toUpperCase()}. Total is: ${price*qty}`
`hello i am ${10 + 10} years old`
Note:- The ${} do not show up in the final string. Methods can be used on the string inside template literals.


null and undefined in JavaScript:
-> null is the intentional absence of any value.
-> The null value must be assigned.
-> Undefined variables are the variables that do not have an assigned value.


MATH OBJECT:
Contains properties and methods for mathematical constants and functions

Math.PI   //returns the value of pi
Math.round(4.9)  //returns 5
Math.abs(-456)   //returns 456
Math.pow(2,5)    //returns 32
Math.floor(3.99999)   //returns 3
Math.ceil(34.6574)   //returns 35
Math.random()   //returns a random decimal value between 0 and 1 (1 not inclusive). We can use math functions on this value to generate random integers of desired length.
e.g)
let G=Math.floor(Math.random()*10) + 10;   //Provides a random number between 10 and 19(inclusive)
let G=Math.floor(Math.random()*5) + 10;    //Provides a random number between 10 and 14(inclusive)


COMPARISON OPERATORS:
>
<
>=
<=
==
!=
===    // Strict equality
!==    // Strict non-equality

The difference between == and === is, == only checks for the equality of a value and not the type.
Whereas === checks for the equality of the type as well as the value.
Same applies for != and !==
e.g)
1 == '1'   //returns true
1 === '1'   //returns false
1 != '1'   //returns false
1 !== '1'   //returns true

Note:- == weirdness
0 == ''   //returns true
0 == false   /returns true
null == undefined    // returns true

ALWAYS USE === AND !==  (In most cases)


CONSOLE, ALERT AND PROMPT
The console object is used to interact with the console.
-> console.warn("UH OH WARNING");   //provides a warning message
-> console.error("ERROR");          //provides an error message

console.log(1+5 , "hi" , true);   //Used to print output onto the console 
Above line provides an output of : 6 hi true 

alert("Hello");    //Provides a pop up message on top of the screen.
prompt("Please enter a number");    //Provides the user with a prompt to collect data. The data collected can then be stored into a variable which is then available on the console.

Note :- While using prompt, the user inputted value is a string. So to perform any numerical operations on it, we must explicitly typecast it.

(SYNTAX)
parseInt("101");     //returns 101
parseInt("10ghw1");  //returns 10
parseInt("101ghw");  //returns 101
Used to explicitly convert a string to a numeric value.


RUNNING CODE FROM A FILE:
Step 1: Write code in a .js file 
Step 2: Include your script in a .html file   (Add at the end of the body tag)


CONDITIONAL STATEMENTS:
The if else-if else statements :-
let rating = 18;
if (rating === 3){
     console.log("YOU'RE A SUPERSTAR");
}
else if(rating > 3){
     console.log("Ayyo big man and dat");
}
else (rating<3){
     console.log("LOL NOOB");
}

Note:- string.indexOf(' ') === -1;     //This can be used to check whether a string contains spaces.


TRUTHY AND FALSEY VALUES:
Every value in js is considered truthy except the following:
false 
0
""
null
undefined 
NaN


Logical operators are operators that allow us to combine different expressions.
The three core logical operators are:
&& - logical and     //all conditions specified have to be true 
|| - logical or      //atleast one condition specified has to be true 
! - logical not      //Inverts or negates the boolean value of an expression 


THE SWITCH STATEMENT:
let day=7;
switch(day){
     case 1:
          console.log("Monday");
          break;
     case 2:
          console.log("Tuesday");
          break;
     case 3:
          console.log("Wednesday");
          break;
     case 4:
          console.log("Thursday");
          break;
     case 5:
          console.log("Friday");
          break;
     case 6:
     case 7:
          console.log("Weekend");
          break;
     default:
          console.log("EVERYDAY IS LEG DAY");
}