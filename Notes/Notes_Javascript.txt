PRIMITIVE TYPES:
The Basic Building Blocks of JavaScript.
The different primitive data types are:
i)Number
ii)String
iii)Boolean
iv)Null
v)Undefined 
Note:- Symbol and BigInt are two other data types.


When we start out with javascript, we'll be using the console on chrome.
The console is a Read-Evaluate-Print-Loop


clear() - Used to clear the console.
typeof(n) - Single operand function which returns the datatype of a given operand. 
// are used to make single line comments in javascript
JavaScript has semicolons


Numbers in JavaScript:
->Only one number type in javascript 
->Positive/negative numbers
->Whole numbers
->Decimal Numbers
->Can have basic math operations like +,-,*,/,%,**
->Follows operator precedence 
->Exponentation is carried out by **
->NaN stands for Not a Number (Used for values like 0/0 or 1+NaN) (Basically an undefined value)


Variables in javascript store data types so that they can be referenced multiple times throughout the program.
(SYNTAX)
let variable_name = value;
e.g)
let year=1985;


Javascript supports the += format for updating variables.
e.g) let hello = 35;
     hello += 5;      //This results in 40. (Also works for -,/,%,*)


JavaScript also supports i++ and ++i incrementers
let i=5;
let num1=i++;  //This stores the value of num1 as 5, but after this line is executed, the value of i gets updated to 6.
let j=5;
let num2=++j;  //This stores the values of j and num2 as 6.


The const keyword is used to make a variable a constant. This means that once the variable is declared, it's value cannot be changed.
(SYNTAX)
const variable_name = value;
e.g)
const hello=5;    // The value of this variable cannot be changed.

Note : Before let and const, the only way to declare a variable was using the keyword 'var'. Nowadays there is no reason to use it. (Works very similar to let)
e.g) var hello=5; 


Booleans in JavaScript: 
->There are only two values for this datatype.
->These two values are true and false (case sensitive)
e.g) let hello1 = true;
     let hello2 = false;


Note:-Datatypes in javascript can change datatypes when re-initialized.
Typescript does not allow this and enforces strict data typing.


Rules for javascript variable naming:
->No spacing in between
->Cannot start with a digit 
->Can contain $ _ and digits(Cannot start with digits of course)
->Lower Camel Casing is a good practice in javascript (e.g currentDate,currentDate,apartmentResidents)


Strings in Javascript:
->Another primitive datatype in javascript
->Textual information 
->Must be wrapped in quotes
->Can use both double and single quotes 
->Must start and end with the same type of quote
->Strings are indexed(every character has a number associated with it). Use square brackets to access individual elements.
->String out of bounds accessing results in undefined
->Strings can be concatenated using the + operator   //"lol"+"lol" results in "lollol" 
->Strings in javascript are immutable 


(SYNTAX)
string.length
Returns the length of the string.
e.g)
"hello".length   //Results in 5


Note:- In javascript, concating a number with a string results in a string containing both the number and the text.


Methods are built in actions we can perform with individual Strings
(SYNTAX)
thing.method()

Note:- .length is accessing a property of the string whereas .method() executes a specified method.

(SYNTAX)
string.toUpperCase() : Converts the entire string to uppercase. Non destructive method (Doesn't directly change the variable unless re-initialized)
string.toLowerCase() : Converts the entire string to lowercase. Non destructive method (Doesn't directly change the variable unless re-initialized)

(SYNTAX)
string.trim() : removes white spaces at the beginning and end of the string 

Methods in javascript can be used multiple in a single line. 
e.g) string.trim().toUpperCase()   //will trim and convert the given string to uppercase.

(SYNTAX)
let string='catdog';
string.indexof('cat');    //return first occurance of cat
Note:- Will return a value of -1 if a substring is not present within a string.

(SYNTAX)
let hello = "helloThereMyFriend"
string.slice(0,5);   //hello
string.slice(5);     //ThereMyFriend
// Same as python
Note:- Negative indexing works as well

(SYNTAX)
let joke='haha that was so funny';
string.replace('haha','lolololol');
Replaces the first occurance of a string with another given string.

(SYNTAX)
let strong='lol';
string.repeat(3);   //lollollol
Repeats a string a number of times.


TEMPLATE LITERALS:
"You bought " + qty + " " + product + ". Total is: " + price*qty
Instead of writing a string like this, javascript offers template literals
These are basically strings that allow embedded expressions, which are evaluated and then turned into a resulting string.
Note:- Backtick characters are required to make template literals work.
e.g) `You bought ${qty} ${product.toUpperCase()}. Total is: ${price*qty}`
`hello i am ${10 + 10} years old`
Note:- The ${} do not show up in the final string. Methods can be used on the string inside template literals.


null and undefined in JavaScript:
-> null is the intentional absence of any value.
-> The null value must be assigned.
-> Undefined variables are the variables that do not have an assigned value.


MATH OBJECT:
Contains properties and methods for mathematical constants and functions

Math.PI   //returns the value of pi
Math.round(4.9)  //returns 5
Math.abs(-456)   //returns 456
Math.pow(2,5)    //returns 32
Math.floor(3.99999)   //returns 3
Math.ceil(34.6574)   //returns 35
Math.random()   //returns a random decimal value between 0 and 1 (1 not inclusive). We can use math functions on this value to generate random integers of desired length.
e.g)
let G=Math.floor(Math.random()*10) + 10;   //Provides a random number between 10 and 19(inclusive)
let G=Math.floor(Math.random()*5) + 10;    //Provides a random number between 10 and 14(inclusive)


COMPARISON OPERATORS:
>
<
>=
<=
==
!=
===    // Strict equality
!==    // Strict non-equality

The difference between == and === is, == only checks for the equality of a value and not the type.
Whereas === checks for the equality of the type as well as the value.
Same applies for != and !==
e.g)
1 == '1'   //returns true
1 === '1'   //returns false
1 != '1'   //returns false
1 !== '1'   //returns true

Note:- == weirdness
0 == ''   //returns true
0 == false   /returns true
null == undefined    // returns true

ALWAYS USE === AND !==  (In most cases)


CONSOLE, ALERT AND PROMPT
The console object is used to interact with the console.
-> console.warn("UH OH WARNING");   //provides a warning message
-> console.error("ERROR");          //provides an error message

console.log(1+5 , "hi" , true);   //Used to print output onto the console 
Above line provides an output of : 6 hi true 

alert("Hello");    //Provides a pop up message on top of the screen.
prompt("Please enter a number");    //Provides the user with a prompt to collect data. The data collected can then be stored into a variable which is then available on the console.

Note :- While using prompt, the user inputted value is a string. So to perform any numerical operations on it, we must explicitly typecast it.

(SYNTAX)
parseInt("101");     //returns 101
parseInt("10ghw1");  //returns 10
parseInt("101ghw");  //returns 101
Used to explicitly convert a string to a numeric value.


RUNNING CODE FROM A FILE:
Step 1: Write code in a .js file 
Step 2: Include your script in a .html file   (Add at the end of the body tag)


CONDITIONAL STATEMENTS:
The if else-if else statements :-
let rating = 18;
if (rating === 3){
     console.log("YOU'RE A SUPERSTAR");
}
else if(rating > 3){
     console.log("Ayyo big man and dat");
}
else (rating<3){
     console.log("LOL NOOB");
}

Note:- string.indexOf(' ') === -1;     //This can be used to check whether a string contains spaces.


TRUTHY AND FALSEY VALUES:
Every value in js is considered truthy except the following:
false 
0
""
null
undefined 
NaN


Logical operators are operators that allow us to combine different expressions.
The three core logical operators are:
&& - logical and     //all conditions specified have to be true 
|| - logical or      //atleast one condition specified has to be true 
! - logical not      //Inverts or negates the boolean value of an expression 


THE SWITCH STATEMENT:
let day=7;
switch(day){
     case 1:
          console.log("Monday");
          break;
     case 2:
          console.log("Tuesday");
          break;
     case 3:
          console.log("Wednesday");
          break;
     case 4:
          console.log("Thursday");
          break;
     case 5:
          console.log("Friday");
          break;
     case 6:
     case 7:
          console.log("Weekend");
          break;
     default:
          console.log("EVERYDAY IS LEG DAY");
}


ARRAYS IN JavaScript:
->Arrays are an ordered collection of values.
->To declare a variable we use the [] brackets
->JavaScript allows arrays of mixed types.
->Arrays are objects (typeof and array would return 'object')
-> .length property is valid for arrays
->Each element is assigned an index starting from 0
->Arrays are mutable
e.g)
let colors = [];
let hello = [1,2,3,4];
let hello1 = ["hey",1,4,"yoyo"];


Built in Array methods:  (destructive)
->push : adds value onto the end of the array and returns the new length of the array
e.g)
let array = [1,2,3];
array.push("hello");    //returns 4
array.push("hello1","hello2","hello3");   //pushes values onto array in order and returns 7.

->pop : removes the last element from the array and returns it to us 
e.g)
let array = [1,2,3];
array.pop()     //returns 3

->shift : removes a value from the start and returns the removed value 
e.g)
let array = [1,2,3];
array.shift();    //returns 1
Note:- Shifting or popping from an empty array returns undefined

->unshift : adds a value to the start of the array
e.g)
let array = [1,2,3];
array.unshift(0);    //adds 0 to the start of the array.

->concat : Used to join the contents of an array to the contents of another array (non-destructive)
e.g)
let array1 = [1,2,3];
let array2 = [4,5,6];
let array3 = array1.concat(array2);   //returns [1,2,3,4,5,6]

->includes : Used to check whether a given element is present within an array or not. Returns a boolean value.
e.g) 
let array = [1,2,3,4,5];
array.includes(3);     //returns true
array.includes(7);     //returns false

->indexOf : Returns the first index at which a given element is found. Returns -1 if element is not found.
e.g)
let array = [1,2,3,4,3,6];
array.indexOf(3);     //returns 2 

->reverse : reverses a specified array.(destructive)
e.g)
let array = [1,2,3,4,5,6];
array.reverse();   //array becomes [6,5,4,3,2,1]

->slice : Used to extract a required sub-array from the main array.It is non-destructive (Second digit, if any, is non-inclusive)
e.g)
let array = [1,2,3,4,5,6];
array.slice(1,5);    //returns [2,3,4,5]
Note:- Negative indices are valid

->splice : It is a destructive method. Used to delete/add elements simultaneously. First argument is the starting index for deletion/index where an element has to be inserted, second is the number of items to delete and third is the element to be inserted. 
e.g)
let colors = ['red','orange','yellow','green','blue','indigo','violet'];
colors.splice(5,2);     //returns indigo and violet while also updating the colors array
colors.splice(5,0,'purple','magenta');    //adds two values at the end of the list (does not return anything tho)
colors.splice(2,2,"DELETED");     //deletes yellow and green and replaces it with "DELETED".

->sort : The sort function in javascript does not work the normal way. It works by converting the elements into strings and then compares the values. This is however not ideal for sorting integer arrays as
the method would interpret 9>125, etc.


When we compare arrays' equalities (with == or ===), if they do not point towards the same memory location, then they will not be equal to each other. 
The only way to make them equal is to make them both point towards the same memory address.
let array = [1,2,3];
let copy = array;
array === copy;    //returns true


When we use the const keyword with an array, we can change the contents of the array but cannot change the original reference of the array.
e.g)
let nums = [1, 2, 3, 4];
nums.push(4);      //This is allowed as the original reference of the array is not changing 

let nums = [1, 2, 3, 4];
nums = [1, 2, 3, 4];
nums = [5, 6, 7, 8];
nums=5;                    //none of these are permitted by javascript


Nested arrays are arrays which contain other arrays within them.
let hello = [[1,2,3],[4,5,6],[7,8,9]];
hello[1][1];    //returns 5
hello[2][0];    //returns 7



OBJECT LITERALS:  
Object Literals will be our second data structure after arrays.
Object Literals are collections of properties. (Properties are key-values pairs) (Basically a dictionary)
Rather than accessing data with indices(like we did in arrays), we use custom keys.

e.g)
const fitBitData = {
     totalSteps : 230183,
     totalMiles : 233.5,
     avgCalorieBurn : 5744,
     workoutsThisWeek : '5 of 7',
     avgGoodSleep : '2:13'
};
Note:- The keys do not need quotes. The order does not matter.


To access data out of the object literal, we use [] along with the key in double quotes. After declaring the keys, javascript converts them into strings. 
Note:- Only use key names without quotes when we're using a variable holding the key name to access the values.
fitBitData["avgGoodSleep"];    //This returns the value '2:13'
                        OR 
fitBitData.avgGoodSleep;      //returns the same thing 


Note:- We can assign variables as the key names and can then use these variables to reference values in the object literal.(Can only do with [])
e.g)
let key = 'totalMiles';
fitBitData[key];     //returns 233.5


To change the values present in a object literal or to add a new key:value pair:
fitBitData["avgCalorieBurn"] = 6757;    //updates data
fitBitData.name = "Sudeev";   //adds data


We can nest arrays and object literals within each other in whatever fashion we desire.
For an array containing multiple object literal, we access elements by:
array[index]['key_name'];  
For an object literal containing another object literal, we access elements by:
object_literal['key1_name']['key2_name'];


LOOPS IN JavaScript:
Loops are a way to repeat a set of code a certain number of times.
The different types of loops in js are:
->for loops
->while loops 
->for...of loops 
->for...in loop 


(SYNTAX) FOR LOOP
for(let i=0;i<10;i++){
     console.log('Hello');
}


To loop over an array with a for loop:
let array = [1,2,3,4,5];
for(let i = 0 ; i < array.length ; i++){
     console.log(i, array[i]);
}
Note:- Loops can be nested.


(SYNTAX) WHILE LOOP 
let num = 0;
while(num < 10){
     console.log('hello');
     num += 2;
}
Note:- The while loop is generally used when the number of iterations are not known whereas the for loop is used when the number of iterations are known.
Note:- Both break and continue are supported by JavaScript.
Note:- JavaScript also has a do while loop with its syntax being similar to C.


The for...of loop helps us iterate over arrays/strings. When we use the for...of loop, the actual values of the elements will be assigned to the variable(declared in loop definition) instead of the indices(as seen in the for...in loop)
array = ['sudeev','osama','obama'];
for(let i of array){
     console.log(`Hello ${i}`);       //prints the values of the array 
}
Note:- The for...of loop cannot be used for object literals in JavaScript.


The for...in loop has the same syntax and definition as for...of except it returns the indices of the array/string and in the case of object literals, it returns the key names.
for(let i in object_literal){
     console.log(`${i} scored ${object_literal[i]}`);
}
Note:- we can also loop over object literals using these commands:
->Object.keys(object_literal)     //returns an array containing the keys of the object literal specified.
->Object.values(object_literal)    //returns an array containing the values of the object literal specified.
->Object.entries(object_literal)    //returns a nested array of key value pairs.
e.g)
If we want to get a sum of the values in a object literal, we can just:
let sumFinal = 0;
for(let sum of Object.values(object_literal)){
     sumFinal += sum; 
}


Note:- To check if a number is NaN, we use Number.isNaN(number);


FUNCTIONS:
->Functions are reusable blocks of code that can be called and used how many ever times needed.
->Helps write modular code.


Writing functions is a two step process.
->Define the function
->Run the function 


(SYNTAX)
function <function_name>(){
     //code;
}


Arguments are values we pass to a function to vary the output depending on the argument passed.
If an expected value is not passed in the function call, that argument gets initialized to undefined.


A function can accept multiple arguments seperated by a comma in both the function definition and call.
The order of the arguments in the function call must match the order of the arguments in the function definition.
Note:- The function arguments can be of different types.
JavaScript does not care whether all the arguments are passed in the function call or not. What is does care about is if the arguments with no value passed to them are being used in the function code later on.


The return keyword works the same way it does in other languages.
Only one value can be returned per function.


SCOPE:
Scope refers to the variable visibility. The location where a variable is defined dictates where we can use that variable.

Function Scope:
->Variables created inside of a function are only accessible within that function.

Block Scope:
->Variables declared within a set of {} using the let keyword are only accessible within that block.
->This is known a block scope.
->Variables declared using the var keyword do not follow the block scope and only follow the function scope.
->This was the reason let and const were introduced into js replacing var.

Lexical Scope:
->A function defined within another function has access to all the variables defined in the parent function. 
->A variable defined within a child function however, can not be accessed by the parent function.

Function Expressions:
->We can assign a function to a variable.
e.g)
const add = function (x,y){
     return x + y;
}
We can call this function by add(1,3);

Higher Order Functions:
->Functions that operate on/with other functions.
They either
->Accept other functions as arguments
->Return a function 

Passing/Accepting Functions as Arguments:
->When passing a function to another function as an argument, do not use () right after the function name as it will run the function on spot.
function hello(func){
     func();
     func();
}
function lol(){
     console.log('Hello World');
}
hello(lol);

Returning functions in js:
We can also return functions in JavaScript.
function isRange(lower,upper){
     return function (num){
          return num > lower && num < upper;
     }
}
const range = isRange(50,100);
range(70);                          //returns true 


Methods in js:
A method is a function that has been placed as a property on an object.
Note:- All methods are functions but not all functions are methods.
e.g) 
const myMath = {
     PI : 3.14159,
     square : function(num){
          return num*num;
     },
     cube : function(num){
          return num**3;
     }
};
Called by using myMath.square(2); or myMath.cube(4);

Note:- The above syntax can also be written as:
const myMath = {
     PI : 3.14159,
     square(num){
          return num*num;
     },
     cube(num){
          return num**3;
     }
};
This works the same way as the previous example.


THE 'THIS' KEYWORD:
->The this keyword is used to access other properties on the same object.
->The value of 'this' depends on the invocation context of the function it is used in.

All functions belong to a top level object called window.
Any user defined function can be invoked by window.function_name();
When a method is individually evoked from an object, and the method contains the 'this' keyword, then 'this' would refer to the window object rather than the object literal itself.


TRY AND CATCH in JS:
The try/catch is used to detect errors(try) and execute a specific set of code(catch) if an error is picked up.
e.g)
try{
     hello.toUpperCase();
}
catch{
     console.log('ERROR');
}


THE forEach METHOD:
The forEach method is used to run a function callback through an array. Only used to iterate through an array.
Note:- A callback is a function passed as an argument to another function.
(SYNTAX)
array_name.forEach(function_callback);
e.g)
array=[1,2,3,4,5];
function print(num){
     console.log(num);
}
array.forEach(print);

          OR
array=[1,2,3,4,5];
array.forEach(function (num){
     console.log(num);
});


THE map METHOD:
The map method creates a new array with the results of calling a callback on every element in the array. Used to return a new modified array.
e.g)
text=['hello','whats','up'];
const caps = text.map(function (word){
     return word.toUpperCase();
});


ARROW FUNCTIONS:
->Not supported by internet explorer.
->A way to reduce the function definition length. 
->We cannot write an arrow function just on it's own(We have to use traditional methods to define a normal function)
->Arrow functions can be used when we're assigning a function to a variable
e.g)
const add = (x,y) => {
     return x+y;
};
To call the above function, we do:
add(3,5);
e.g)
const square = (x) => {
     return x*x;
};
To call, we use:
square(3);
e.g)
const rollDie = () => {
     return Math.floor(Math.random()*6) + 1;
};

Note:- When we only have one parameter, using the () becomes optional.


IMPLICIT RETURNS:
->Implicit returns are used to make the code even more compact.
->Can only be used on arrow functions.
->When the function only returns a value and does nothing else, we can ommit the return keyword and replace the {} with ().
e.g)
const rollDie = () => (
     Math.floor(Math.random() * 6) + 1;
);
This is the same as using the return keyword in {} braces.
e.g)
const add = (a,b) => a + b;             //This is also an implicit return
We can add the return value onto the same line and omit the () braces.


Note:- We use arrow function when we're passing it onto array method like map or forEach to make the code more compact.


setTimeout and setInterval:
The setTimout function is used to execute a set of code after a specified amount of time.
e.g)
console.log('Hello.....');
setTimeout(() => {
     console.log('...are you still there?');
}, 5000);
The first argument to the setTimeout function is the code that is to be executed after a specified time interval. The code must be within a function so that it does not get executed immediately.
The seecond argument is the time after which the code gets executed specified in milliseconds.
The above code prints "...are you still there?" after 5 seconds/5000 milliseconds.
Note:- Any codes written after the setTimeout function will be executed immediately. i.e) A console.log() present after the setTimeout function gets printed before the setTimeout function console.log().

The setInterval function has the same functionality as the setTimeout function except that it repeats a set of code in the specified time interval until it stops.
To stop the setInterval function, we use the clearInterval(id) function where id is the variable assigned to the setInterval function.
e.g)
const id=setInterval(() => {
     console.log(Math.random());
},3000);


THE filter METHOD:
->Creates a new array with all elements that pass the test implemented by the provided function.
e.g)
const numbers=[1,2,3,4,5,6,7,8,9,10,11,12,14];
const newArray = numbers.filter(n => {
     return n < 10;
});
The above code creates a new array which contains the elements from the numbers array which are lesser than 10.


some/every:
->Ways to check if atleast one/every element in the array passes a given condition.
->The some keyword checks if atleast one of the array elements passes the condition and returns a boolean value.
->The every keyword checks if all the elements in the array pass the condition statement and returns a boolean value.
e.g)
const array = [80,75,90,95,77,70];
array.some(n => n > 90);            //returns true because 95>90.
e.g)
const array = [80,75,90,95,77,70];
array.every(n => n > 90);            //returns false because not all values are greater than 90.


THE reduce FUNCTION:
->Executes a reducer function on each element of the array resulting in a single value.
(SYNTAX)
const total = [3,5,7,9,11].reduce((accumulator, currentValue) => {
     return accumulator+currentValue;
});
->accumulator is what we're going to reduce down to.
->currentValue holds each individual element.
->Whatever we return will be used as the next iteration's accumulator.
->The accumulator starts off with the first element in the array while the currentValue starts off as the second element in the array.
->Can contain a second argument which will serve as the starting value for the accumulator.
e.g)
const evens = [2,4,6,8];
const total = evens.reduce((total,num) =>{
     return total+num;
},100);                                  //returns 120

Note:- JavaScript also contains a reduceRight() function which initializes the accumulator varaible as the last element of the array and currentValue variable as the second last element and then moves from right to left of the array.


Notes:-
->Be careful while using the 'this' keyword with arrow functions in user defined object methods.
->Using a this keyword in a setTimeout function will make it refer to the window object because the setTimeout function is a method of the window object.
->To make sure the 'this' keyword DOES NOT refer to the parent object, we use the arrow function. i.e) =>
->To make sure the 'this' keyword DOES refer to the parent object, we use the normal declaration. i.e) function (){}


DEFAULT PARAMS:
->Default params are a way to initialize a parameter value to a specific value.
->The defualt params can only show up at the end of the parameter list for the function to work properly.
e.g)
function greet(name,msg="Hey there"){
     console.log(`${msg}, ${name}`);
}


SPREAD WITH FUNCTION CALLS:
->For specific function which require more than one input { e.g) Math.max(1,2,3,4,5)  //returns 5 } we can use spread so that we can pass an array into this function.
->Spread is represented by ...<array_name>
->Math.max([1,2,3])  will return NaN.
->Math.max(...[1,2,3]) will return 3.
Notes:- 
->console.log('hey','there')  would print out "hey there"
->console.log(...['hey','there'])   prints out the same thing 


SPREAD WITH ARRAY LITERALS AND OBJECT LITERALS:
To combibe two or more arrays, we can use:
let a=[1,2,3,4];
let b=[5,6,7,8];
let c=[9,10];
let final = [...a, ...b, ...c , 'haha counted to 10'];
final is an array containing [1,2,3,4,5,6,7,8,9,10,'haha counted to 10']
Note:-The + operator cannot combine arrays in js.

To combine object literals:
let hello = {1:'yo'};
let hey = {2:'yoyo'};
let lol = {...hello, ...hey, 3:'yoyoyo'};
The value of lol would be {1:'yo', 2:'yoyo', 3:'yoyoyo'}
->In case there's a conflict with keys, the value mentioned second would have the higher precedence.
->If we try to spread an array in an object, the keys would be their indices and the values would be the elements themselves.


REST PARAMS:
->Every function defined has an array called arguments which holds all the arguments passed to a function.
Note:- This array is not a typical array and the normal methods we would use on an array, are not applicable to the arguments array.
->We cannot push/pop/reduce,etc.
->We use rest params to fix this.
e.g)
function sum(...nums){
     return nums.reduce((total,n) => total + n);
}
Here, sum accepts how many ever arguments it wants and stores all of them in an array called nums(could be any name).
This is a normal array and we can run any valid method on this array.


DESTRUCTURING ARRAYS:
->We can unpack an array by the following method:
e.g)
let array = [1,2,3,4,5,6,7,8,9,10];
const [gold,silver,bronze,...everyoneElse] = array;
Here, gold would receive a value of 1
silver would receive a value of 2
bronze would receive a value of 3 
everyoneElse would be an array containing all the other elements


DESTRUCTURING OBJECTS:
e.g)
let lol = {email : '1' , name : '2' , born : '3' , died : '4'};
const {email, name, born, died} = lol;
This will produce individual variables named email,name,born,died which have their values equal to the corresponding values in the object literal.

->If we want to customize the names of the variables, we can use:
const {email : contact_info , name : Identification_name , born : birthyear , died : deathyear} = lol;
This will assign the values into variable names of our choice. 

->We can also pass default values in case the key is not present in the object literal.
let lol = {email : '1' , name : '2' , born : '3' , died : '4'};
const {email, name, born, died = 5} = lol;                   //sets died as 5 if not found in lol.


DESTRUCTURING PARAMS:
let lol = {email : '1' , name : '2' , born : '3' , died : '4'};
function({email, name}){
     console.log(`${email} - ${name}`);
}
->We can destructure a object in the parameter list to select only the values we want to use in the function.
->We can also provide default values while destructuring.



