REACT:
-> World's most popular front end library
-> Library that helps us build user interfaces from components that we can define
-> We can assemble smaller components to build larger applications


COMPONENETS:
-> Combine HTML and logic into a single reusable function.
-> Components are usually HTML with CSS and JS


NOTE: Use code sandbox for practicing react.


JSX:
-> JSX is a syntax extension for javascript.
-> Allows us to write markup that looks like HTML directly inside of our Javascript
-> It's not legal JS on it's own, so it must be transpiled.
-> Babel takes code that is not real javascript and transpiles it into real javascript.


BASIC REACT APP STRUCTURE:
-> Conventions that most react apps follow
-> There should be present a component called App.js 
-> App is the top level component of the entire application
-> All the components are rendered at the end of the day as part of a single component called App.
-> This App component is rendered in the index.js file (which puts the content onto the index.html file)


WRITING COMPONENETS:
-> Writing a function where the first letter of the function name is in uppercase.
e.g)
function Header() {
    return <h1>I'm a header component!</h1>
}
-> To render this component, in the App function, add '<Header/>'
e.g)
import "./styles.css";

function Greeter() {
  return <h1>Hello!</h1>;
}

export default function App() {
  return (
    <div className="App">
      <Greeter/>
      <h2>Hehe YeaBwoi</h2>
      <input type="text" placeholder="Hello" />
    </div>
  );
}



WRITING COMPONENETS IN DIFFERENT FILES:
-> We should generally write our components in different files with the names of each of these files being the same as the name of the function.
-> Add 'export default' at the beginning of the function definition in the new file.
e.g)
export default function Header() {
    return <h1>Hello<h1/>
}

-> We can also add a line at the end of the file to export our components 
e.g)
function Header() {
    return <h1>Hello<h1/>
}
export default Header;

-> In the App.js file, import the function from the new component file we just created.
e.g)
import Greeter from './Greeter';

-> To export multiple functions/components we can also do:
e.g)
function Header() {
    return <h1>Hello<h1/>
}
export {Header};
-> To export multiple components, just seperate it with a comma.

-> To import this, we can do:
e.g)
import {Header} from './Header';
-> Note: The name in both the export and import statements must match.



JSX RULES:
-> We must explicitly close self-closing elements like <br/>
-> Components can only return a single element.
-> Therefore to overcome this issue, we can return multiple elements wrapped in a div tag.
e.g)
export default function LoginForm() {
  return (
    <form>
      <input type="text" placeholder="Username" />
      <input type="password" placeholder="Password" />
      <br />
      <button>Login</button>
    </form>
  );
}
            (OR)
e.g)
export default function LoginForm() {
  return (
    <div>
      <input type="text" placeholder="Username" />
      <input type="password" placeholder="Password" />
      <br />
      <button>Login</button>
    </div>
  );
}



REACT FRAGMENTS:
-> When we do not want to return multiple elements enclosed in a div tag (as it clutters up the html document with unnecessary div tags), we can use react fragments.
e.g)
export default function LoginForm() {
  return (
    <>
      <input type="text" placeholder="Username" />
      <input type="password" placeholder="Password" />
      <br />
      <button>Login</button>
    </>
  );
}



EVALUATING JS EXPRESSIONS IN JSX:
-> To do this, we must carry out any expressions within {}. The {} escape the JSX syntax and treats anything inside it as pure javascript.
e.g)
export default function Greeter() {
    return <h1>Hello I'm sudeev! and my age is {2023 - 2003}</h1>;
}
            (OR)
e.g)
export default function Greeter() {
    const age = 20;
    return <h1>Hello I'm sudeev! and my age is {age}</h1>;
}



STYLING COMPONENETS:
-> While trying to specify the value of the class of a html tag in jsx, remember that class is a reserved keyword for javascript 
-> Therefore we use 'className' instead of class while using html in jsx
-> Convention is to usually create a new style sheet for each component and add styles onto it.


GEN1 POKEDEX USING REACT:
-> App.js
import "./styles.css";
import "./Pokemon.css";
import Pokemon from "./Pokemon";
export default function App() {
  return (
    <div className="App">
      <Pokemon></Pokemon>
    </div>
  );
}

-> Pokemon.js
import Die from "./Die.js";
export default function Pokemon() {
  const rand = Die();
  const url = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${rand}.png`;
  return (
    <div className="Pokemon">
      <h1>Pokemon #{rand}</h1>
      <img className="image" src={url} alt="" />
    </div>
  );
}

-> Die.js
export default function Die() {
  const rand = Math.floor(Math.random() * 151) + 1;
  return rand;
}

-> Pokemon.css
.Pokemon {
  color: blue;
  border: 5px solid black;
  width: 250px;
  border-radius: 20px;
}
.image {
  width: 160px;
  height: auto;
}



RUNNING LOCAL REACT APPS:
-> We use vite to setup a react environment.
-> To create a new react environment, run:
e.g)
npm create vite@latest 
-> We then have to enter a name for our project (this will be the name of the folder created)
-> Once we enter a name, we have to change our current working directory to the newly created folder.
-> We then run 'npm install' to download all the dependencies.
-> Now to start up our server, we run 'npm run dev'
-> We can also use 'create react app' to create a react environment for us.



PROPS:
-> Props are like arguments that we can provide to our components
-> We use props to make configurable components
e.g)
<Greeter name="Sudeev" />
-> In the JSX file, we need to mention an argument in the function definition. This argument will be an object. We can also destructure it in the function definition and use it as a normal variable.
e.g)
export default function Die(props){
    const rand = Math.floor(Math.random() * props.numSides) + 1;
    return <h1>Your lucky number is {rand}</h1>
}
-> To input multiple props, we can do:
e.g)
<Greeter name="Sudeev" color="black" />



PASSING NON-STRING PROPS:
-> To pass in number props, we can specify the value in {}
e.g)
<Greeter numSides={6} />
-> To pass in a list of values, we can:
e.g)
<ListPicker values={[1,2,3]} />
-> To pass in a objects, we can:
e.g)
<ListPicker values={{a: 1, b: 2, c: 3}} />



DEFAULT PROP VALUES:
-> To add default prop values, we do:
e.g)
export default function Die({numSides = 6}){
    const rand = Math.floor(Math.random() * numSides) + 1;
    return <h1>Your lucky number is {rand}</h1>
}



REACT CONDITIONALS:
e.g)
{num1 === num2 ? <h1>You win :)</h1> : <h1>You lose :(</h1>}
-> In the above example, if we do not have an else condition, we can also do:
e.g)
{num1 === num2 && <h1>You win :)</h1>}
-> Ternary operator is very useful while using react.
-> Refer to FirstReactApp/src/DoubleDice.jsx for more info



ADDING DYNAMIC COMPONENT STYLES:
-> We can define a 'style' attribute on a tag and set it's value to an object containing the styles we want to dynamically add.
e.g)
export default function DoubleDice(){
    const num1 = Math.floor(Math.random() * 3) + 1;
    const num2 = Math.floor(Math.random() * 3) + 1;
    const styles = { color : num1 === num2 ? 'green' : 'red'}
    return(
    <div className="DoubleDice" style={styles}>
        {num1 === num2 ? <h1>You win :)</h1> : <h1>You lose :(</h1>}
        <p>Num1: {num1}</p>
        <p>Num2: {num2}</p>
    </div>
    );
}
-> This can also be done as such:
e.g)
export default function ShoppingList({list}) {
    return(
        <ul>
            {list.map((i) => (
                <li style={{color: i.completed === true ? 'gray' : '' , textDecoration: i.completed === true ? 'line-through' : ''}}>
                    <b>{i.item}</b> - {i.quantity}
                </li>
            ))}
        </ul>
    );
}
-> Refer to FirstReactApp/src/DoubleDice.jsx for more info



RENDERING ARRAYS WITH MAP:
-> When we try to render an array using react, all the elements are taken and joined together and displayed in the browser.
-> To overcome this, we need to render each element as a tag 
-> We use the map function to turn each element into a tag
e.g)
export default function ColorList({colors}){
    const lis = colors.map((color) => <li>{color}</li>);
    const styles = {color: 'magenta'};
    return (
        <div style={styles}>
            <h3>List of colors used:</h3>
            <ul>
                {lis}
            </ul> 
        </div>
    );
} 



THE KEY PROP:
-> The key prop is added to a child tag of the tag being returned to provide it an unique identifier.
-> React requires an unique identifier for each of its existing child elements.
e.g)
export default function ShoppingList({list}) {
    return(
        <ul>
            {list.map((i) => (
                <li key={i.id} style={{color: i.completed === true ? 'gray' : '' , textDecoration: i.completed === true ? 'line-through' : ''}}>
                    <b>{i.item}</b> - {i.quantity}
                </li>
            ))}
        </ul>
    );
}


Note : It's good to implement more components in your application as it helps with reusability as well as implementing any future features


PASSING PROPS USING THE SPREAD OPERATOR:
-> As long as the data being passed and the props have the same name, we can use the spread operator to pass props in component calls.
e.g)
export default function Hello({greet, name, age}){
  return(
    <div>
      <p>{greet}, my name is {name} and my age is {age}</p>
    </div>
  );
}
-> This can be called as:
e.g)
<Hello {...i} />
where, i is an object containing key value pairs which have the same name as the props.



TURNING OFF REACT PROP TYPES:
-> To do this, in the .eslintrc.cjs file, under rules add 
"react/prop-types": "off"



PROPTYPES:
-> If we're not using typescript, we can use prop types to specify the datatypes of the props.
e.g)
import PropTypes from "prop-types";

export default function ListItem({ id, item, quantity, completed }) {
    return(
        <li key={id} style={{color: completed === true ? 'gray' : 'red' , textDecoration: completed === true ? 'line-through' : ''}}>
                <b>{item}</b> - {quantity}
        </li>
    )
}

ListItem.propTypes = { 
    item: PropTypes.string,
    quantity: PropTypes.number,
    completed: PropTypes.bool
};



REACT EVENTS:
-> To do this, we set the events within the tag as an attribute.
-> The events are all camel cased.
-> The specified event must refer to a function that will be called once the event is triggered.
-> We do not use () after specifying the function name as that would directly call the function.
e.g)
function clickHandler(){
    console.log('Hello');
}

export default function Clicker() {
    return(
        <div>
            <p>Click the button</p>
            <button onClick={clickHandler}>Click</button>
        </div>
    );
}



NON-CLICK EVENTS:
-> To refer to other non-click events, refer to https://developer.mozilla.org/en-US/docs/Web/Events
e.g)
function clickHandler(){
    console.log('You clicked!');
}

function handleHover(){
    console.log('You Hovered!');
}

export default function Clicker() {
    return(
        <div>
            <p onMouseOver={handleHover}>Hover over me</p>
            <button onClick={clickHandler}>Click</button>
        </div>
    );
}



EVENT OBJECT:
-> An event object is automatically passed onto the event handler function which can then be used for various reasons (stop propogation, prevent default, etc).
e.g)
function submitHandler(evt){
    evt.preventDefault();
    console.log('Submitted the form!');
}
export default function Form() {
    return(
        <form onSubmit={submitHandler}>
            <button>Submit</button>
        </form>
    );
}


NOTE: Props are immutable


STATE:
-> For the given code
e.g)
export default function Counter() {
    let num = 0;
    const incrementNum = () => {
        num += 1;
    }
    return(
        <div>
            <p>The count is: {num}</p>
            <button onClick={incrementNum}>Increment</button>
        </div>
    );
}
-> React will not increase the value of num, everytime the button is clicked, as the paragraph only gets rendered once and thus the output will always be 0
-> We use state to overcome this issue
-> State values can change
-> Everytime state data is changed, it is re-rendered onto the browser.



WHAT GOES IN STATE:
-> Data fetched from API 
-> Form Information 
-> Variable that decides whether something is showing or hidden 
-> If the value will change, it is a state 



USING STATE:
-> We create a state using the useState hook
-> A hook is a function that react gives us which we can incorporate into our own components to add some functionality 
e.g)
const [count, setCount] = useState(0);

-> The above code returns an array containing two elements:
    The piece of state itself (a variable) whose initial value will be whatever is passed into the ()
    A function to change the piece of state
-> For example, the piece of state is 'count', function is 'setCount' and the initial value is 0.
-> We must always call useState inside a component.
-> We can have multiple pieces of state in a single component.
-> A working incrementer function, looks like this:
e.g)
import {useState} from 'react';

export default function Counter() {
    let [num, setNum] = useState(0);
    function changeNum(){
        num += 1;
        setNum(num);
    }
    return(
        <div>
            <p>The count is: {num}</p>
            <button onClick={changeNum}>Increment</button>
        </div>
    );
}


NOTE: Everytime a state value is changed, the entire component is rendered again (except the useState initialization).



SETTING STATE WITH AN UPDATER FUNCTION:
-> Everytime we update a state value, instead of updating the state variable value like this:
e.g)
import { useState } from "react";
export default function Counter() {
    const [count, setCount] = useState(0);
    function increseCount(){
        setCount(count + 1);
    }
    return (
        <div>
            <p>Count : {count}</p>
            <button onClick={increseCount}>+1</button>
        </div>
    );
}
-> Update the state variable like this instead:
e.g)
function increseCount(){
    setCount((count) => count + 1);
}
-> When running multiple setCounts in a single function with the old method, the count variable does not get updated after the first occurance of setCount.
-> To counter this, we pass arrow functions into the setCount function 
-> The name inside the arrow function brackets can be anything
e.g)
function increseCount(){
    setCount((countCurrent) => countCurrent + 1);
    console.log(count);                                   //Value of count will not have changed yet
    setCount((countCurrent) => countCurrent + 1);
}
-> Value of count will not be changed until all setCounts are run
-> Passing a callback only required when we're using the old value of the state variable.



SETTING INITIALIZER FUNCTIONS:
e.g)
import { useState } from "react";
function generateGameBoard(){
    console.log('Making the initial game board');
    return Array(5000);
}
export default function Dumbo(){
    const [board, setBoard] = useState(generateGameBoard());
    return(
        <button onClick={() => setBoard}>Click Me to change state</button>
    )
}
-> We only want the generateGameBoard function to run once (when we initialize the useState)
-> However, the above code runs the generateGameBoard function everytime the component is re-rendered.
-> To overcome this issue, just remove the parantheses after the function name 
e.g)
export default function Dumbo(){
    const [board, setBoard] = useState(generateGameBoard);
    return(
        <button onClick={() => setBoard}>Click Me to change state</button>
    )
}
-> In this code, the generateGameBoard function runs only when the useState is initialized



NOTE: React does not re-render a component when the value of the state variable is not being changed.

WORKING WITH OBJECTS IN STATE:
-> When we create a state variable that's initialized as an object, whenever we change a property on the object, the object's address does not change and therefore, the component is not re-rendered.
e.g)
import { useState } from "react";
export default function ScoreKeeper() {
    const [scores, setScores] = useState({p1Score: 0, p2Score: 0});
    function increaseP1Score(){
        scores.p1Score += 1;
        setScores(scores);
    }
    return(
        <div>
            <p>Player 1: {scores.p1Score}</p>
            <p>Player 2: {scores.p2Score}</p>
            <button onClick={increaseP1Score}>+1 Player 1</button>
            <button>+1 Player 2</button>
        </div>
    )
}
-> This will not re-render the updated values onto the screen
-> To overcome this, we create a copy of the object using the spread operator and set this object as the new object, causing the component to get re-rendered. 
e.g)
function increaseP1Score(){
    setScores((oldscores) => {
        return {...oldscores, p1Score: oldscores.p1Score + 1}
    });
}



ADDING ELEMENTS TO AN ARRAY IN STATE:
-> Same problem as objects (memory location does not change and component will not be re-rendered)
e.g)
import {v4 as uuid} from 'uuid';
import { useState } from "react";
const emojis = ['😊', '😂', '😍', '😎', '🤩', '🥳', '😜', '😇', '🤔', '🙄', '😏', '🤯', '😴', '🤪', '🥺', '😢', '😭', '🤬', '🤮', '🤕'];
export default function EmoticonClicker(){
    const [emoticons, setEmoticon] = useState([{id: uuid(),emoji:'😊'}]);
    function addEmoticon(){
        setEmoticon((oldEmoticons) => {
            return [...oldEmoticons, {id: uuid(),emoji: emojis[Math.floor(Math.random() * 20)]}]    //adding elements to a react useState array(create a copy)
        });
    }
    return(
        <div>
            {emoticons.map((emoticon) => <span key={emoticon.id} style={{fontSize: '4rem'}}>{emoticon.emoji}</span>)}
            <button onClick={addEmoticon}>Add Emoji</button>
        </div>
    );
}



DELETING ELEMENTS FROM AN ARRAY IN STATE:
-> To delete elements from an array, we will need the unique identifier of the tag element which we wish to delete.
-> Once we have the tag element's unique identifier we use the filter method to remove the element which has the given unique id value.
-> The filter, map and other array methods automatically gives us a copy of the array which causes the component to be re-rendered.
e.g)
import {v4 as uuid} from 'uuid';
import { useState } from "react";
const emojis = ['😊', '😂', '😍', '😎', '🤩', '🥳', '😜', '😇', '🤔', '🙄', '😏', '🤯', '😴', '🤪', '🥺', '😢', '😭', '🤬', '🤮', '🤕'];
export default function EmoticonClicker(){
    const [emoticons, setEmoticon] = useState([{id: uuid(),emoji:'😊'}]);
    function deleteEmoticon(iden){
        setEmoticon((oldEmoticons) => {
            const newEmoticons = oldEmoticons.filter((e) => e.id !== iden);   //using filter method to create a copy of the array not containing the element with the unique id.
            return newEmoticons;
        });
    }
    function addEmoticon(){
        setEmoticon((oldEmoticons) => {
            return [...oldEmoticons, {id: uuid(),emoji: emojis[Math.floor(Math.random() * 20)]}]    //adding elements to a react useState array(create a copy)
        });
    }
    return(
        <div>
            {emoticons.map((emoticon) => <span onClick={() => deleteEmoticon(emoticon.id) } key={emoticon.id} style={{fontSize: '4rem'}}>{emoticon.emoji}</span>)}
            <button onClick={addEmoticon}>Add Emoji</button>
        </div>
    );
} 



COMMON ARRAY UPDATING PATTERNS:
-> None of these techniques mutate the original array. They make a copy of the array.
const shoppingCart = [
    {id: 1, product: "HDMI Cable", price: 4},
    {id: 2, product: "Easy Bake Oven", price: 28},
    {id: 3, product: "Peach Pir", price: 6.5}
];

-> Adding to an array:
[...shoppingCart, {id: 4, product: "Coffee Mug", price: 7.99}];

-> Removing an element:
shoppingCart.filter((item) => item.id !== 2);

-> Updating all elements in an array:
shoppingCart.map((item) => {
    return{...item, product: item.product.toLowerCase()};
});

-> Modifying a particular element in an array:
shoppingCart.map((item) => {
    if(item.id === 3){
        return {...item, price: 10.99};
    }
    else{
        return item;
    }
});



STATE DESIGN PRINCIPLE:
-> Lift state as high as needed - but no higher
-> Generally, aim to have components be one of two types:
    -Presentational : Does not have state and is primarily focused on appearance. AKA dumb components
    -Logical : Has state/logic and is not about any specific UI. AKA stateful component



PASSING FUNCTIONS AS PROPS:
-> We can pass in functions as props.
-> These functions can then be used in the child components.
e.g)
function lessThan(dice){
    return sum(dice) < 4;     //sum is a user defined function that returns the sum of the array 
}
function App(){
    return(
        <LuckyN winCheck={lessThan} />
    );
}
-> We can use the lessThan function in the child function but we must access it as 'winCheck'.
-> We can also pass functions that update state variables as props to other components.
-> Whenever the prop function is called in a child component, the function is invoked in the parent component and is re-rendered in the parent component itself.



REACT FORMS:
-> We use a state to manage the input entered by the user.
-> The user does not actually type it out but instead we set an event function on it which reads the users inputs and re-renders the component everytime to make it look like the user is typing.
e.g)
const [username, setUsername] = useState('');
return (
    <div>
        <input type="text" placeholder="username" value={username}/>
        <button>Submit</button>
    </div>
);
-> We then add the onChange() event listener to listen for any keyboard inputs.
-> Capture this keyboard input and re-render the component using this new value.
e.g)
import { useState } from "react";
export default function UsernameForm() {
    const [username, setUsername] = useState('');
    function updateUsername(evt){
        setUsername((lol) => {
            return evt.target.value;
        });
    }
    return (
        <div>
            <input type="text" placeholder="username" value={username} onChange={updateUsername}/>
            <button>Submit</button>
        </div>
    );
}


NOTE: When we use a label tag in react and want to apply the 'for' attribute, react will throw an error. 
This is because 'for' is a keyword. To overcome this, we use the htmlFor attribute. The htmlFor attribute basically renders as 'for' in the final html sheet.



HANDLING MULTIPLE INPUTS:
-> When we're working with multiple inputs, it is usually best to use an object to take care of all the states which we would use normally otherwise.
-> Do not forget to specify the name attribute in html tags so we can access it.
e.g)
import { useState } from "react";

export default function UsernameForm() {
    const [formData, setFormData] = useState({
        firstName: "",
        lastName: "",
        password: ""
    });
    function handleChange(evt) {
        const fieldName = evt.target.name;
        const value = evt.target.value;
        setFormData((currData) => {
            currData[fieldName] = value;
            return {...currData};
        });
    }
    function handleSubmit(){
        console.log(formData);
    }
    return (
        <div>
            <label htmlFor="firstName">First Name</label>
            <input type="text" placeholder="First name" 
            value={formData.firstName} onChange={handleChange}
            id='firstName' name='firstName'/>
            <label htmlFor="lastName">Last Name</label>
            <input type="text" placeholder="Last name"
             value={formData.lastName} onChange={handleChange}
             id='lastName' name='lastName'/>
            <label htmlFor="password">Password</label>
            <input type="password" placeholder="password" 
            value={formData.password} onChange={handleChange}
            id='password' name='password'/>
            <button onClick={handleSubmit}>Submit</button>
        </div>
    );
}
-> We can write the handleChange() function in a different way as well to reeduce the code
e.g)
function handleChange(evt) {
    const fieldName = evt.target.name;
    const value = evt.target.value;
    setFormData((currData) => {
        return{
            ...currData,
            [fieldName] : value    
        };
    });
}



REACT HOOK FORM:
-> Refer to link for docs
https://react-hook-form.com/get-started
-> Used to write react form validations.
-> Regular Expressions can be used.
-> To install it, we must run:
e.g)
npm install react-hook-form 
-> To import the react hook form:
e.g)
import { useForm } from 'react-hook-form';
-> Within the function use:
e.g)
const { register, handleSubmit, watch, formState: { errors } } = useForm();
-> The above mentioned handleSubmit function is wrapped around the function we wish to invoke, when a form is submitted. This validates the inputs before the function is invoked.
e.g)
<form onSubmit={handleSubmit(onSubmit)}>
-> We then create an object containing all the error messages and validations for each input type. We also use the 'register' option to set these validations on the input tags.
e.g)
const registerOptions = {
    name: { required : "Name cannot be blank"},
    email: { required : "Email cannot be blank"},
    password: {
        required: "Password is required",
        minLength: {
            value: 10,
            message: "Password must be atleast 10 characters"
        }
    }
    quantity: {
        required: "Quantity is required",
        min: {
            value: 0,
            message: "Quantity must be greater than 0"
        },
        max: {
            value: 10,
            message: "Quantity must be less than 10"
        }
    }
} 
return(
    <form onSubmit={handleSubmit(onSubmit)}>
    <div>
        <input name="name" type="text" {...register("name", registerOptions.name)} />
        <small className="text-danger">
            {errors?.name && errors.name.message}
        </small>
        <input name="password" type="password" {...register("password", registerOptions.password)} />
        <small className="text-danger">
            {errors?.password && errors.password.message}                    //Checks for errors and renders the error message if any error found.
        </small>
    </div>
)

-> The above validations only show up after the form is submitted.
-> To get validations everytime an input is changed, we do:
e.g)
const { register, handleSubmit, watch, formState: { errors } } = useForm({ mode: "onChange" });



EFFECTS:
-> Extra features/effects we can add everytime a component gets re-rendered. 
-> This is useful for
i) Changing parts of the DOM not covered by React
ii) Async operations, like AJAX requests when a component is mounted
iii) Doing things when a component is about to be unmounted



THE useEffect HOOK:
-> To import the useEffect hook, we do:
e.g)
import { useState, useEffect } from 'react';
-> Has to be inside of the component
-> We then use the effect on a specific function
e.g)
function myEffect() {
    console.log('Hello');
}
useEffect(myEffect);

          OR

useEffect(function myEffect() {
    console.log('Hello');
});



2nd ARGUMENT TO useEffect:
-> We can also provide a second argument to the useEffect hook.
-> This is an array.
-> The elements of the array are called dependencies.
-> These elements are states.
-> When any one of the given states change, the callback function is executed.
-> We do not call it on every single render. We only call it when a specific piece of state changes.
e.g)
import { useState, useEffect } from "react";

export default function Counter(){
    const [count,setCount] = useState(0);
    const [name, setName] = useState('');
    useEffect(function myEffectButton(){
        console.log('Button was Clicked');
    }, [count]);
    useEffect(function myEffectInput(){
        console.log('Value was Entered');
    }, [name])
    const increment = () => {
        setCount((c) => c + 1);
    };
    const handleChange = (evt) => {
        setName(evt.target.value);
    };
    return(
        <div>
            <h1>{count}</h1>
            <button onClick={increment}>+1</button>
            <p>Name: {name}</p>
            <input value={name} onChange={handleChange} type="text" />
        </div>
    )
}



FETCHING INITIAL DATA FROM AN API:
-> useState does not take asynchronus functions as a parameter.
-> Therefore to fetch initial data from an API, we use the useEffect hook and specify [] as the second parameter. This makes the useEffect hook run only the first time(on mount).
-> However even useEffect does not accept asynchronus functions as parameters. To overcome this, we just wrap the async function within an arrow function and immediately invoke it.
e.g)
import { useEffect, useState } from "react";

const RANDOM_QUOTE_URL = 'https://inspo-quotes-api.herokuapp.com/quotes/random';

export default function QuoteFetcher() {
    const [quote, setQuote] = useState({text:'', author: ''});

    useEffect(() => {
        async function getInitialQuote(){
            const response = await fetch(RANDOM_QUOTE_URL);
            const jsonResponse = await response.json();
            const randomQuote = jsonResponse.quote;
            setQuote(randomQuote);
        }
        getInitialQuote();
    }, []); 

    async function fetchQuote() {
        const response = await fetch(RANDOM_QUOTE_URL);
        const jsonResponse = await response.json();
        const randomQuote = jsonResponse.quote;
        setQuote(randomQuote);
    }

    return(
        <div>
            <button onClick={fetchQuote}>Get Quote Using Handler</button>
            <h1>{quote.text}</h1>
            <h3>{quote.author}</h3>
        </div>
    )
}



ADDING A LOADER:
-> We do this by using a seperate boolean state and render a paragraph that says loading whenever the boolean state is true.
-> We can also add animations instead of just displaying Loading...
e.g)
import { useEffect, useState } from "react";

const RANDOM_QUOTE_URL = 'https://inspo-quotes-api.herokuapp.com/quotes/random';

export default function QuoteFetcherLoader() {
    const [quote, setQuote] = useState({text:'', author: ''});
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        async function getInitialQuote(){
            const response = await fetch(RANDOM_QUOTE_URL);
            const jsonResponse = await response.json();
            const randomQuote = jsonResponse.quote;
            setQuote(lol         => randomQuote);
            setIsLoading(lol => false);
        }
        getInitialQuote();
    }, []); 

    async function fetchQuote() {
        const response = await fetch(RANDOM_QUOTE_URL);
        const jsonResponse = await response.json();
        const randomQuote = jsonResponse.quote;
        setQuote(randomQuote);
    }

    return(
        <div>
            {isLoading && <p>Loading...</p>}
            <h1>{quote.text}</h1>
            <h3>{quote.author}</h3>
        </div>
    )
}

